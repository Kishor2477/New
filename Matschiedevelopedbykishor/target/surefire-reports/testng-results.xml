<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="0" total="2" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="6692" started-at="2022-04-06T14:24:21Z" finished-at="2022-04-06T14:24:28Z">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@c01636]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test name="Surefire test" duration-ms="6692" started-at="2022-04-06T14:24:21Z" finished-at="2022-04-06T14:24:28Z">
      <class name="services.IncidentTests">
        <test-method status="PASS" signature="setUp()[pri:0, instance:services.IncidentTests@12cb653]" name="setUp" is-config="true" duration-ms="731" started-at="2022-04-06T14:24:20Z" finished-at="2022-04-06T14:24:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="getIncidents()[pri:0, instance:services.IncidentTests@12cb653]" name="getIncidents" duration-ms="2337" started-at="2022-04-06T14:24:26Z" finished-at="2022-04-06T14:24:28Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[2 expectations failed.
Response body doesn't match expectation.
Expected: a string containing "number"
  Actual: <html>
    <head>
        <meta HTTP-EQUIV="refresh" content="5;https://developer.servicenow.com/dev.do#!/home?wu=true">
        <title>
            Instance Hibernating page
        </title>
        <style>
            @font-face {
                font-family: "Gilroy-Bold";
                font-style: normal;
                 font-weight: normal;
                src: url("gilroy-bold-webfont.woff2") format("woff2"),
                     url("gilroy-bold-webfont.woff") format("woff");
            }
            @font-face {
                font-family: "Gilroy-Regular";
                font-style: normal;
                font-weight: normal;
                src: url("gilroy-regular-webfont.woff2") format("woff2"),
                     url("gilroy-regular-webfont.woff") format("woff");
            }
            @font-face {
                font-family: 'Gilroy-Medium';
                font-style: normal;
                font-weight: normal;
                src: url('gilroy-medium-webfont.woff2') format('woff2'),
                     url('gilroy-medium-webfont.woff') format('woff');
            }
            @font-face {
                font-family: 'SourceSansPro-Regular';
                src: url("source-sans-pro-v11-latin-regular.woff2") format("woff2"),
                     url("source-sans-pro-v11-latin-regular.woff") format("woff");
            }
            body {
                background-color: #293D40;
            }
            h1 {
                margin: 150px 0 90px 0;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Bold;
                font-size: 38px;
                font-weight: bold;
                height: 42px;
                letter-spacing: 0;
                line-height: 42px;
                width: 520px;
            }
            a {
                color: rgb(255, 255, 255);
                text-decoration: none;
            }
            button {
                padding: 9px 0 27px 0;
                background: rgb(255, 255, 255);
                margin-left: 26%;
                cursor: pointer;
            }
            .instance-hibernating-page {
                max-width: 600px;
                margin: auto;
                padding: 10px;
            }
            .resting-image {
                height: fit-content;
                position: relative;
            }
            .information {
                margin: 30px 0 0 -80px;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Regular;
                font-size: 21px;
                font-weight: normal;
                height: 64px;
                letter-spacing: 0;
                line-height: 32px;
                text-align: center;
                width: 665px;
            }
            .external-link {
                text-decoration: underline;
            }
            .button-text {
                color: rgb(71, 77, 82);
                font-family: Gilroy-Medium;
                font-size: 15px;
                height: 17px;
                letter-spacing: 0;
                width: 172px;
            }
            .button-arrow {
                padding-left: 2px;
            }
            .redirection-text {
                margin: 64px 0 0 8%;
                color: rgb(255, 255, 255);
                font-family: SourceSansPro-Regular;
                font-size: 13px;
                font-weight: normal;
                height: 20px;
                letter-spacing: 0;
                line-height: 20px;
                width: 410px;
            }
            .texture-image {
                margin: 0 60px 0 1133px;
                position: absolute;
                width: 240px;
                top: 0;
                right: 0;
            }
        </style>
    </head>
    <body>
        <div class="instance-hibernating-page">
            <h1>Your instance is hibernating</h1>
            <img class="resting-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Resting-Image-Asset.svg" alt="texture_image" width="500" height="300">
            <p class="information">Sign in to the site to wake your instance</p>
            <button onclick="location.href='https://developer.servicenow.com/dev.do#!/home?wu=true';" class ="button-text">Sign in
                <span class="button-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 12 12" style="width: 0.75rem; height: 0.75rem;">
                        <g stroke="none" fill="none"><path fill="currentColor" d="M9.11 6L5.815 2.704l.707-.708L11 6.475l-4.479 4.479-.707-.708L9.061 7H1.003V6z"></path></g>
                    </svg>
                </span>
            </button>
            <p class="information">
                Want to find out why instances hibernate? Read more about instances in the
                <a href="https://developer.servicenow.com/dev.do#!/guides/latest/developer-program/pdi-guide/personal-developer-instance-guide-introduction" target="_blank">
                    <span class="external-link">
                        Personal Developer Instance Guide
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 16 16" style="width: 1rem; height: 1rem;">
                        <g stroke="none" fill="none">
                            <path fill="currentColor" d="M5 3v1h6.293l-8.651 8.648.707.707L12 4.707v6.294h1V3z">
                            </path>
                        </g>
                    </svg>
                </a>
            </p>
            <p class="redirection-text">You'll be automatically redirected to the ServiceNow Developer Site shortly</p>
            <img class="texture-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Texture-image-asset.png" alt="circles">
        </div>
    </body>
</html>


Response body doesn't match expectation.
Expected: a string containing "sys_id"
  Actual: <html>
    <head>
        <meta HTTP-EQUIV="refresh" content="5;https://developer.servicenow.com/dev.do#!/home?wu=true">
        <title>
            Instance Hibernating page
        </title>
        <style>
            @font-face {
                font-family: "Gilroy-Bold";
                font-style: normal;
                 font-weight: normal;
                src: url("gilroy-bold-webfont.woff2") format("woff2"),
                     url("gilroy-bold-webfont.woff") format("woff");
            }
            @font-face {
                font-family: "Gilroy-Regular";
                font-style: normal;
                font-weight: normal;
                src: url("gilroy-regular-webfont.woff2") format("woff2"),
                     url("gilroy-regular-webfont.woff") format("woff");
            }
            @font-face {
                font-family: 'Gilroy-Medium';
                font-style: normal;
                font-weight: normal;
                src: url('gilroy-medium-webfont.woff2') format('woff2'),
                     url('gilroy-medium-webfont.woff') format('woff');
            }
            @font-face {
                font-family: 'SourceSansPro-Regular';
                src: url("source-sans-pro-v11-latin-regular.woff2") format("woff2"),
                     url("source-sans-pro-v11-latin-regular.woff") format("woff");
            }
            body {
                background-color: #293D40;
            }
            h1 {
                margin: 150px 0 90px 0;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Bold;
                font-size: 38px;
                font-weight: bold;
                height: 42px;
                letter-spacing: 0;
                line-height: 42px;
                width: 520px;
            }
            a {
                color: rgb(255, 255, 255);
                text-decoration: none;
            }
            button {
                padding: 9px 0 27px 0;
                background: rgb(255, 255, 255);
                margin-left: 26%;
                cursor: pointer;
            }
            .instance-hibernating-page {
                max-width: 600px;
                margin: auto;
                padding: 10px;
            }
            .resting-image {
                height: fit-content;
                position: relative;
            }
            .information {
                margin: 30px 0 0 -80px;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Regular;
                font-size: 21px;
                font-weight: normal;
                height: 64px;
                letter-spacing: 0;
                line-height: 32px;
                text-align: center;
                width: 665px;
            }
            .external-link {
                text-decoration: underline;
            }
            .button-text {
                color: rgb(71, 77, 82);
                font-family: Gilroy-Medium;
                font-size: 15px;
                height: 17px;
                letter-spacing: 0;
                width: 172px;
            }
            .button-arrow {
                padding-left: 2px;
            }
            .redirection-text {
                margin: 64px 0 0 8%;
                color: rgb(255, 255, 255);
                font-family: SourceSansPro-Regular;
                font-size: 13px;
                font-weight: normal;
                height: 20px;
                letter-spacing: 0;
                line-height: 20px;
                width: 410px;
            }
            .texture-image {
                margin: 0 60px 0 1133px;
                position: absolute;
                width: 240px;
                top: 0;
                right: 0;
            }
        </style>
    </head>
    <body>
        <div class="instance-hibernating-page">
            <h1>Your instance is hibernating</h1>
            <img class="resting-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Resting-Image-Asset.svg" alt="texture_image" width="500" height="300">
            <p class="information">Sign in to the site to wake your instance</p>
            <button onclick="location.href='https://developer.servicenow.com/dev.do#!/home?wu=true';" class ="button-text">Sign in
                <span class="button-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 12 12" style="width: 0.75rem; height: 0.75rem;">
                        <g stroke="none" fill="none"><path fill="currentColor" d="M9.11 6L5.815 2.704l.707-.708L11 6.475l-4.479 4.479-.707-.708L9.061 7H1.003V6z"></path></g>
                    </svg>
                </span>
            </button>
            <p class="information">
                Want to find out why instances hibernate? Read more about instances in the
                <a href="https://developer.servicenow.com/dev.do#!/guides/latest/developer-program/pdi-guide/personal-developer-instance-guide-introduction" target="_blank">
                    <span class="external-link">
                        Personal Developer Instance Guide
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 16 16" style="width: 1rem; height: 1rem;">
                        <g stroke="none" fill="none">
                            <path fill="currentColor" d="M5 3v1h6.293l-8.651 8.648.707.707L12 4.707v6.294h1V3z">
                            </path>
                        </g>
                    </svg>
                </a>
            </p>
            <p class="redirection-text">You'll be automatically redirected to the ServiceNow Developer Site shortly</p>
            <img class="texture-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Texture-image-asset.png" alt="circles">
        </div>
    </body>
</html>

]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 2 expectations failed.
Response body doesn't match expectation.
Expected: a string containing "number"
  Actual: <html>
    <head>
        <meta HTTP-EQUIV="refresh" content="5;https://developer.servicenow.com/dev.do#!/home?wu=true">
        <title>
            Instance Hibernating page
        </title>
        <style>
            @font-face {
                font-family: "Gilroy-Bold";
                font-style: normal;
                 font-weight: normal;
                src: url("gilroy-bold-webfont.woff2") format("woff2"),
                     url("gilroy-bold-webfont.woff") format("woff");
            }
            @font-face {
                font-family: "Gilroy-Regular";
                font-style: normal;
                font-weight: normal;
                src: url("gilroy-regular-webfont.woff2") format("woff2"),
                     url("gilroy-regular-webfont.woff") format("woff");
            }
            @font-face {
                font-family: 'Gilroy-Medium';
                font-style: normal;
                font-weight: normal;
                src: url('gilroy-medium-webfont.woff2') format('woff2'),
                     url('gilroy-medium-webfont.woff') format('woff');
            }
            @font-face {
                font-family: 'SourceSansPro-Regular';
                src: url("source-sans-pro-v11-latin-regular.woff2") format("woff2"),
                     url("source-sans-pro-v11-latin-regular.woff") format("woff");
            }
            body {
                background-color: #293D40;
            }
            h1 {
                margin: 150px 0 90px 0;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Bold;
                font-size: 38px;
                font-weight: bold;
                height: 42px;
                letter-spacing: 0;
                line-height: 42px;
                width: 520px;
            }
            a {
                color: rgb(255, 255, 255);
                text-decoration: none;
            }
            button {
                padding: 9px 0 27px 0;
                background: rgb(255, 255, 255);
                margin-left: 26%;
                cursor: pointer;
            }
            .instance-hibernating-page {
                max-width: 600px;
                margin: auto;
                padding: 10px;
            }
            .resting-image {
                height: fit-content;
                position: relative;
            }
            .information {
                margin: 30px 0 0 -80px;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Regular;
                font-size: 21px;
                font-weight: normal;
                height: 64px;
                letter-spacing: 0;
                line-height: 32px;
                text-align: center;
                width: 665px;
            }
            .external-link {
                text-decoration: underline;
            }
            .button-text {
                color: rgb(71, 77, 82);
                font-family: Gilroy-Medium;
                font-size: 15px;
                height: 17px;
                letter-spacing: 0;
                width: 172px;
            }
            .button-arrow {
                padding-left: 2px;
            }
            .redirection-text {
                margin: 64px 0 0 8%;
                color: rgb(255, 255, 255);
                font-family: SourceSansPro-Regular;
                font-size: 13px;
                font-weight: normal;
                height: 20px;
                letter-spacing: 0;
                line-height: 20px;
                width: 410px;
            }
            .texture-image {
                margin: 0 60px 0 1133px;
                position: absolute;
                width: 240px;
                top: 0;
                right: 0;
            }
        </style>
    </head>
    <body>
        <div class="instance-hibernating-page">
            <h1>Your instance is hibernating</h1>
            <img class="resting-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Resting-Image-Asset.svg" alt="texture_image" width="500" height="300">
            <p class="information">Sign in to the site to wake your instance</p>
            <button onclick="location.href='https://developer.servicenow.com/dev.do#!/home?wu=true';" class ="button-text">Sign in
                <span class="button-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 12 12" style="width: 0.75rem; height: 0.75rem;">
                        <g stroke="none" fill="none"><path fill="currentColor" d="M9.11 6L5.815 2.704l.707-.708L11 6.475l-4.479 4.479-.707-.708L9.061 7H1.003V6z"></path></g>
                    </svg>
                </span>
            </button>
            <p class="information">
                Want to find out why instances hibernate? Read more about instances in the
                <a href="https://developer.servicenow.com/dev.do#!/guides/latest/developer-program/pdi-guide/personal-developer-instance-guide-introduction" target="_blank">
                    <span class="external-link">
                        Personal Developer Instance Guide
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 16 16" style="width: 1rem; height: 1rem;">
                        <g stroke="none" fill="none">
                            <path fill="currentColor" d="M5 3v1h6.293l-8.651 8.648.707.707L12 4.707v6.294h1V3z">
                            </path>
                        </g>
                    </svg>
                </a>
            </p>
            <p class="redirection-text">You'll be automatically redirected to the ServiceNow Developer Site shortly</p>
            <img class="texture-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Texture-image-asset.png" alt="circles">
        </div>
    </body>
</html>


Response body doesn't match expectation.
Expected: a string containing "sys_id"
  Actual: <html>
    <head>
        <meta HTTP-EQUIV="refresh" content="5;https://developer.servicenow.com/dev.do#!/home?wu=true">
        <title>
            Instance Hibernating page
        </title>
        <style>
            @font-face {
                font-family: "Gilroy-Bold";
                font-style: normal;
                 font-weight: normal;
                src: url("gilroy-bold-webfont.woff2") format("woff2"),
                     url("gilroy-bold-webfont.woff") format("woff");
            }
            @font-face {
                font-family: "Gilroy-Regular";
                font-style: normal;
                font-weight: normal;
                src: url("gilroy-regular-webfont.woff2") format("woff2"),
                     url("gilroy-regular-webfont.woff") format("woff");
            }
            @font-face {
                font-family: 'Gilroy-Medium';
                font-style: normal;
                font-weight: normal;
                src: url('gilroy-medium-webfont.woff2') format('woff2'),
                     url('gilroy-medium-webfont.woff') format('woff');
            }
            @font-face {
                font-family: 'SourceSansPro-Regular';
                src: url("source-sans-pro-v11-latin-regular.woff2") format("woff2"),
                     url("source-sans-pro-v11-latin-regular.woff") format("woff");
            }
            body {
                background-color: #293D40;
            }
            h1 {
                margin: 150px 0 90px 0;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Bold;
                font-size: 38px;
                font-weight: bold;
                height: 42px;
                letter-spacing: 0;
                line-height: 42px;
                width: 520px;
            }
            a {
                color: rgb(255, 255, 255);
                text-decoration: none;
            }
            button {
                padding: 9px 0 27px 0;
                background: rgb(255, 255, 255);
                margin-left: 26%;
                cursor: pointer;
            }
            .instance-hibernating-page {
                max-width: 600px;
                margin: auto;
                padding: 10px;
            }
            .resting-image {
                height: fit-content;
                position: relative;
            }
            .information {
                margin: 30px 0 0 -80px;
                color: rgb(255, 255, 255);
                font-family: Gilroy-Regular;
                font-size: 21px;
                font-weight: normal;
                height: 64px;
                letter-spacing: 0;
                line-height: 32px;
                text-align: center;
                width: 665px;
            }
            .external-link {
                text-decoration: underline;
            }
            .button-text {
                color: rgb(71, 77, 82);
                font-family: Gilroy-Medium;
                font-size: 15px;
                height: 17px;
                letter-spacing: 0;
                width: 172px;
            }
            .button-arrow {
                padding-left: 2px;
            }
            .redirection-text {
                margin: 64px 0 0 8%;
                color: rgb(255, 255, 255);
                font-family: SourceSansPro-Regular;
                font-size: 13px;
                font-weight: normal;
                height: 20px;
                letter-spacing: 0;
                line-height: 20px;
                width: 410px;
            }
            .texture-image {
                margin: 0 60px 0 1133px;
                position: absolute;
                width: 240px;
                top: 0;
                right: 0;
            }
        </style>
    </head>
    <body>
        <div class="instance-hibernating-page">
            <h1>Your instance is hibernating</h1>
            <img class="resting-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Resting-Image-Asset.svg" alt="texture_image" width="500" height="300">
            <p class="information">Sign in to the site to wake your instance</p>
            <button onclick="location.href='https://developer.servicenow.com/dev.do#!/home?wu=true';" class ="button-text">Sign in
                <span class="button-arrow">
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 12 12" style="width: 0.75rem; height: 0.75rem;">
                        <g stroke="none" fill="none"><path fill="currentColor" d="M9.11 6L5.815 2.704l.707-.708L11 6.475l-4.479 4.479-.707-.708L9.061 7H1.003V6z"></path></g>
                    </svg>
                </span>
            </button>
            <p class="information">
                Want to find out why instances hibernate? Read more about instances in the
                <a href="https://developer.servicenow.com/dev.do#!/guides/latest/developer-program/pdi-guide/personal-developer-instance-guide-introduction" target="_blank">
                    <span class="external-link">
                        Personal Developer Instance Guide
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" viewBox="0 0 16 16" style="width: 1rem; height: 1rem;">
                        <g stroke="none" fill="none">
                            <path fill="currentColor" d="M5 3v1h6.293l-8.651 8.648.707.707L12 4.707v6.294h1V3z">
                            </path>
                        </g>
                    </svg>
                </a>
            </p>
            <p class="redirection-text">You'll be automatically redirected to the ServiceNow Developer Site shortly</p>
            <img class="texture-image" src="https://sndevstore.blob.core.windows.net/images/Hibernating-page_Texture-image-asset.png" alt="circles">
        </div>
    </body>
</html>


at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:156)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)
at io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)
at services.IncidentTests.getIncidents(IncidentTests.java:20)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getIncidents -->
      </class> <!-- services.IncidentTests -->
      <class name="runner.RunTest">
        <test-method status="PASS" signature="setUpClass()[pri:0, instance:runner.RunTest@c01636]" name="setUpClass" is-config="true" duration-ms="319" started-at="2022-04-06T14:24:21Z" finished-at="2022-04-06T14:24:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="FAIL" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@c01636]" name="runScenario" duration-ms="3994" started-at="2022-04-06T14:24:22Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-04-06T14:24:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["Create a new incident with short description"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Create New Incident"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <200>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:156)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:156)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at steps.IncidentManagement.verify_status_code(IncidentManagement.java:44)
at ✽.the status code is 201(file:///D:/API%20Documents/FrameWork/Matschie/Matschie/src/test/java/features/CreateIncident.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="tearDownClass()[pri:0, instance:runner.RunTest@c01636]" name="tearDownClass" is-config="true" duration-ms="6" started-at="2022-04-06T14:24:26Z" finished-at="2022-04-06T14:24:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- runner.RunTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
